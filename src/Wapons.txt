{-# OPTIONS_GHC -O2  #-}
{-# LANGUAGE BangPatterns#-}
{-# LANGUAGE PatternGuards #-}
module Warrier.Wapons where

{-
import Util
import Data.Vec2
import GameSim
-- import GameRule
import Player
import Player.GA
-}
import Warrier.IO
import Data.Array.IO
import Data.Maybe
import Data.Function
import Data.List
import System.Random
import System.IO
import Control.Monad
import System.Timeout
import System.CPUTime
import Debug.Trace
--import Control.Parallel

----------------Warrier Start------------------------
gameCycles :: (PlayerIO p) => Ckpts -> [PodState]-> p -> IO ()
gameCycles ckpts [p1,p2,o1,o2] player = do
   [p1',p2',o1',o2'] <- sequence $ map (updatePod ckpts) [p1,p2,o1,o2]
   
   let playerIn = PlayerIn [p1',p2'] [o1',o2']
   
   ([move1,move2] , player') <- playerRunIO player playerIn
   
   let (p1'' ,p2'')= (p1'{podMovement = move1} ,p2'{podMovement=move2})
   
   let [p1''',p2'''] = map updateShieldThrust [p1'',p2'']
   
   putMovement move1
   putMovement move2
   gameCycles ckpts [p1''',p2''',o1',o2'] player'



   
main :: IO ()
main = do
    hSetBuffering stdout NoBuffering -- DO NOT REMOVE

    
    cInfo@(laps,ckpts) <- readCkpts
    pod1  <- readPod cInfo
    pod2  <- readPod cInfo
    opp1  <- readPod cInfo
    opp2  <- readPod cInfo
    
    player <- playerInitIO $ defaultGAMeta --WrapIO $  ElementaryPlayer ()
    let playerIn = PlayerIn [pod1,pod2] [opp1,opp2]
    ([move1,move2] , player' )  <- playerRunIO player playerIn
    let (pod1' ,pod2')= (pod1{podMovement = move1} ,pod2{podMovement=move2})
    let [podStart1,podStart2] = map updateShieldThrust [pod1',pod2']
    putMovement move1
    putMovement move2
    -- game loop
    gameCycles ckpts [podStart1,podStart2,opp1,opp2] player'
